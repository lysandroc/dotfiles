#!/usr/bin/env zsh

WORKSPACE_3D="~/projects"
D_FRONTEND="$WORKSPACE_3D/device-app-frontend"
D_BACKEND="$WORKSPACE_3D/device-app-backend"
D_DAL="$WORKSPACE_3D/go-dal-client"
T_FRONTEND="$WORKSPACE_3D/tauron-ui"
T_BACKEND="$WORKSPACE_3D/tauron-api"
J_BACKEND="$WORKSPACE_3D/jango"
T_DAL="$WORKSPACE_3D/dal"

WORKSPACE_NATURA="~/projects/natura"
RT_UPLOAD="$WORKSPACE_NATURA/commercial-segmentation-upload-recognition"
RT_CONSUMER_SQS_PYTHON="$WORKSPACE_NATURA/commercial-segmentation-relationship-time"
RT_PRODUCER_SQS_NODE="$WORKSPACE_NATURA/commercial-segmentation-relationship-time-load-sqs"
#engine-segmentation
SEGMENTATION_TITLES_ENGINE="$WORKSPACE_NATURA/segmentation-commercial-titles-engine"
SEGMENTATION_ACTIVES_ENGINE="$WORKSPACE_NATURA/segmentation-commercial-actives-engine"
SEGMENTATION_COMMON="$WORKSPACE_NATURA/segmentation-commercial-commons-engine"
#segmentation
SEGMENTATION_FRONTEND="$WORKSPACE_NATURA/segmentation-commercial-frontend"
SEGMENTATION_BACKEND="$WORKSPACE_NATURA/segmentation-commercial-api"
#malotes
MALOTES_FRONTEND="$WORKSPACE_NATURA/mpd-commercial-frontend"
MALOTES_BACKEND="$WORKSPACE_NATURA/gem-commercial-api"
PARAMETER_FRONTEND="$WORKSPACE_NATURA/commercial-parameter-management-grp"

STAY_WORKSPACE="~/projects/stay"
STAY_NEW_FRONTEND="$STAY_WORKSPACE/list-view"
STAY_DESIGN_SYSTEM="$STAY_WORKSPACE/design-system"
STAY_HUB="$STAY_WORKSPACE/hub"
STAY_HUBAPI="$STAY_WORKSPACE/hub-api"
STAY_FRONTEND="$STAY_WORKSPACE/frontend"
STAY_API="$STAY_WORKSPACE/api"
STAY_GEOCODER="$STAY_WORKSPACE/frontend"
# STAY_DESIGN_SYSTEM="$STAY_WORKSPACE/designsystem"
# STAY_SMARTMAP="$STAY_WORKSPACE/smartmap"
# STAY_OMNISCIENT="$STAY_WORKSPACE/omniscient"

attach() {
    session_name=$1
    tmux has-session -t=$session_name 2> /dev/null

    if [[ $? -ne 0 ]]; then
        TMUX='' tmux new-session -d -s "$session_name"
    fi

    if [[ -z "$TMUX" ]]; then
        tmux attach -t "$session_name"
    else
        tmux switch-client -t "$session_name"
    fi
}

openProject() {
    if [[ $# -eq 1 ]]; then
        selected=$1
    else
        selected=$(find ~/projects/stay ~/projects -mindepth 1 -maxdepth 1 -type d | fzf)
    fi

    if [[ -z $selected ]]; then
        return
    fi

    selected_name=$(basename "$selected" | tr . _)
    tmux_running=$(pgrep tmux)
    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        tmux new-session -s $selected_name -c $selected
        return
    fi

    if ! tmux has-session -t $selected_name 2> /dev/null; then
        tmux new-session -ds $selected_name -c $selected
    fi

    if [[ -z $TMUX ]]; then
        tmux attach-session -t $selected_name
    else
        tmux switch-client -t $selected_name
    fi
}

createWindow() {
    session=$1
    window=$2
    shift
    shift
    hasWindow=$(tmux list-windows -t $session | grep "$window")
    if [ -z "$hasWindow" ]; then
        cmd="tmux neww -t $session: -n $window -d"
        if [ $# -gt 0 ]; then
            cmd="$cmd $@"
        fi
        echo "Creating Window(\"$hasWindow\"): $cmd"
        eval $cmd
    fi
}

createSession() {
    session=$1
    window=$2
    shift
    shift

    if ! tmux has-session -t $session 2> /dev/null; then
        cmd="tmux new -s $session -d -n $window $@ > /dev/null 2>&1"
        echo "Creating Session: $cmd"
        eval $cmd
    else 
        echo "Session required already exists: $session"
    fi
}

while [ "$#" -gt 0 ]; do
    curr=$1
    shift

    case "$curr" in
    "-openProject")
        openProject
        ;;
    "-d")
        #version=$1
        #if [ -z $version ]; then
        #    echo "-n should have the next argument contain a number"
        #    exit 1
        #fi
        createSession 3DDevice scripts -c $D_FRONTEND
        tmux split-window -t 3DDevice:scripts -c $D_BACKEND
        createWindow 3DDevice frontend -c $D_FRONTEND
        createWindow 3DDevice backend -c $D_BACKEND
        createWindow 3DDevice go-dal-client -c $D_DAL
        ;;
    "-t")
        createSession 3DTauron scripts -c $T_FRONTEND
        tmux split-window -t 3D:scripts -c $T_BACKEND
        createWindow 3DTauron tauron-ui -c $T_FRONTEND
        createWindow 3DTauron tauron-api -c $T_BACKEND
        createWindow 3DTauron ruby-dal -c $T_DAL
        ;;
    # "-relationshiptime")
    #     createSession relationship-time scripts -c $RT_PRODUCER_SQS_NODE \; tmux splitw -t relationship-time:scripts -d -c $RT_CONSUMER_SQS_PYTHON
    #     createWindow relationship-time producer-relationshiptime -c $RT_PRODUCER_SQS_NODE
    #     createWindow relationship-time consumer-relationshiptime -c $RT_CONSUMER_SQS_PYTHON
    #     createWindow relationship-time motor-upload -c $RT_UPLOAD
    #     attach relationship-time
    #     ;;
    # "-engine-segmentation")
    #     createSession engine-seg scripts -c $SEGMENTATION_ACTIVES_ENGINE \; tmux splitw -t engine-seg:scripts -d -c $SEGMENTATION_TITLES_ENGINE
    #     createWindow engine-seg actives-engine -c $SEGMENTATION_ACTIVES_ENGINE
    #     createWindow engine-seg tiltes-engine -c $SEGMENTATION_TITLES_ENGINE
    #     createWindow engine-seg common -c $SEGMENTATION_COMMON
    #     attach engine-seg
    #     ;;
    # "-segmentation")
    #     createSession segmentation scripts -c $SEGMENTATION_FRONTEND \; tmux splitw -t segmentation:scripts -d -c $SEGMENTATION_BACKEND
    #     createWindow segmentation seg-front -c $SEGMENTATION_FRONTEND
    #     createWindow segmentation seg-back -c $SEGMENTATION_BACKEND
    #     attach segmentation
    #     ;;
    # "-malotes")
    #     createSession malotes scripts -c $MALOTES_BACKEND \; tmux splitw -t malotes:scripts -d -c $MALOTES_FRONTEND
    #     createWindow malotes malotes-front -c $MALOTES_FRONTEND
    #     createWindow malotes malotes-back -c $MALOTES_BACKEND
    #     createWindow malotes parameter -c $PARAMETER_FRONTEND
    #     attach malotes
    #     ;;
    "-listview")
        createSession listview scripts -c $STAY_NEW_FRONTEND \; tmux splitw -t listview:scripts -d -c $STAY_DESIGN_SYSTEM
        # createWindow stay smartmap -c $STAY_SMARTMAP
        # createWindow stay omniscient -c $STAY_OMNISCIENT
        # createWindow stay designsystem -c $STAY_DESIGN_SYSTEM
        createWindow listview fe -c $STAY_NEW_FRONTEND
        createWindow listview ds -c $STAY_DESIGN_SYSTEM
        attach listview
        ;;
    "-og")
        createSession staymap scripts -c $STAY_FRONTEND \; #tmux splitw -t staymap:scripts -d -c $STAY_HUBAPI
        createWindow staymap OG -c $STAY_FRONTEND
        createWindow staymap API -c $STAY_API
        createWindow staymap geocoding23 -c $STAY_GEOCODER
        attach staymap
        ;;
    "-hub")
        createSession stayhub scripts -c $STAY_HUB \; tmux splitw -t stayhub:scripts -d -c $STAY_HUBAPI
        createWindow stayhub hub -c $STAY_HUB
        createWindow stayhub hub-api -c $STAY_HUBAPI
        attach stayhub
        ;;
    # "--vwm")
    #     createSession $PERSONAL_SESSION primary -c $VWM
    #     createWindow $PERSONAL_SESSION vwm -c $VWM "NVIM_LISTEN_ADDRESS=/tmp/nvim2 go run main.go"
    #     ;;
    *) echo "Unavailable workspace... $curr"
    esac
done

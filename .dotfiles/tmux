#!/usr/bin/env zsh

WORKSPACE_3D="~/3d"
D_FRONTEND="$WORKSPACE_3D/device-app-frontend"
D_BACKEND="$WORKSPACE_3D/device-app-backend"
D_DAL="$WORKSPACE_3D/go-dal-client"
T_FRONTEND="$WORKSPACE_3D/tauron-ui"
T_BACKEND="$WORKSPACE_3D/tauron-api"
J_BACKEND="$WORKSPACE_3D/jango"
T_DAL="$WORKSPACE_3D/dal"

WORKSPACE_NATURA="~/natura"
RT_UPLOAD="$WORKSPACE_NATURA/commercial-segmentation-upload-recognition"
RT_CONSUMER_SQS_PYTHON="$WORKSPACE_NATURA/commercial-segmentation-relationship-time"
RT_PRODUCER_SQS_NODE="$WORKSPACE_NATURA/commercial-segmentation-relationship-time-load-sqs"
#engine-segmentation
SEGMENTATION_TITLES_ENGINE="$WORKSPACE_NATURA/segmentation-commercial-titles-engine"
SEGMENTATION_ACTIVES_ENGINE="$WORKSPACE_NATURA/segmentation-commercial-actives-engine"
SEGMENTATION_COMMON="$WORKSPACE_NATURA/segmentation-commercial-commons-engine"
#segmentation
SEGMENTATION_FRONTEND="$WORKSPACE_NATURA/segmentation-commercial-frontend"
SEGMENTATION_BACKEND="$WORKSPACE_NATURA/segmentation-commercial-api"
#malotes
MALOTES_FRONTEND="$WORKSPACE_NATURA/mpd-commercial-frontend"
MALOTES_BACKEND="$WORKSPACE_NATURA/gem-commercial-api"
PARAMETER_FRONTEND="$WORKSPACE_NATURA/commercial-parameter-management-grp"

#PERSONAL_SESSION="vimdeathmatch"
#DEATHMATCH="~/personal/VimDeathmatch/server"
#VWM="~/personal/vim-with-me/v3"
#TVUI="~/work/tvui"
#TVUI_AUTOMATION="~/work/tvui-automation"

createWindow() {
    session=$1
    window=$2
    shift
    shift
    hasWindow=$(tmux list-windows -t $session | grep "$window")
    if [ -z "$hasWindow" ]; then
        cmd="tmux neww -t $session: -n $window -d"
        if [ $# -gt 0 ]; then
            cmd="$cmd $@"
        fi
        echo "Creating Window(\"$hasWindow\"): $cmd"
        eval $cmd
    fi
}

createSession() {
    session=$1
    window=$2
    shift
    shift
    cmd="tmux new -s $session -d -n $window $@ > /dev/null 2>&1"

    echo "Creating Session: $cmd"
    eval $cmd
}

while [ "$#" -gt 0 ]; do
    curr=$1
    shift

    case "$curr" in
    "-d")
        #version=$1
        #if [ -z $version ]; then
        #    echo "-n should have the next argument contain a number"
        #    exit 1
        #fi
        createSession 3DDevice scripts -c $D_FRONTEND
        tmux split-window -t 3DDevice:scripts -c $D_BACKEND
        createWindow 3DDevice frontend -c $D_FRONTEND
        createWindow 3DDevice backend -c $D_BACKEND
        createWindow 3DDevice go-dal-client -c $D_DAL
        ;;
    "-t")
        createSession 3DTauron scripts -c $T_FRONTEND
        tmux split-window -t 3D:scripts -c $T_BACKEND
        createWindow 3DTauron tauron-ui -c $T_FRONTEND
        createWindow 3DTauron tauron-api -c $T_BACKEND
        createWindow 3DTauron ruby-dal -c $T_DAL
        ;;

    "-relationshiptime")
        createSession relationship-time scripts -c $RT_PRODUCER_SQS_NODE \; tmux splitw -t relationship-time:scripts -d -c $RT_CONSUMER_SQS_PYTHON
        createWindow relationship-time producer-relationshiptime -c $RT_PRODUCER_SQS_NODE
        createWindow relationship-time consumer-relationshiptime -c $RT_CONSUMER_SQS_PYTHON
        createWindow relationship-time motor-upload -c $RT_UPLOAD
        ;;
    "-engine-segmentation")
        createSession engine-seg scripts -c $SEGMENTATION_ACTIVES_ENGINE \; tmux splitw -t engine-seg:scripts -d -c $SEGMENTATION_TITLES_ENGINE
        createWindow engine-seg actives-engine -c $SEGMENTATION_ACTIVES_ENGINE
        createWindow engine-seg tiltes-engine -c $SEGMENTATION_TITLES_ENGINE
        createWindow engine-seg common -c $SEGMENTATION_COMMON
        ;;
    "-segmentation")
        createSession segmentation scripts -c $SEGMENTATION_FRONTEND \; tmux splitw -t segmentation:scripts -d -c $SEGMENTATION_BACKEND
        createWindow segmentation seg-front -c $SEGMENTATION_FRONTEND
        createWindow segmentation seg-back -c $SEGMENTATION_BACKEND
        ;;
    "-malotes")
        createSession malotes scripts -c $MALOTES_BACKEND \; tmux splitw -t malotes:scripts -d -c $MALOTES_FRONTEND
        createWindow malotes malotes-front -c $MALOTES_FRONTEND
        createWindow malotes malotes-back -c $MALOTES_BACKEND
        createWindow malotes parameter -c $PARAMETER_FRONTEND
        ;;
    # "--vwm")
    #     createSession $PERSONAL_SESSION primary -c $VWM
    #     createWindow $PERSONAL_SESSION vwm -c $VWM "NVIM_LISTEN_ADDRESS=/tmp/nvim2 go run main.go"
    #     ;;
    #
    # "--deathmatch")
    #     createSession $PERSONAL_SESSION primary -c $DEATHMATCH
    #     createWindow $PERSONAL_SESSION server -c $DEATHMATCH/server "docker-compose up --build"
    #     tmux next-window -t $PERSONAL_SESSION:primary
    #     ;;

    *) echo "Unavailable workspace... $curr"
    esac
done
